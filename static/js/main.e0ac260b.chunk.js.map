{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddToDo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","React","headerStyle","textAlign","Header","AddToDo","state","onSubmit","e","preventDefault","addTodo","setState","alert","target","name","value","display","placeholder","flex","className","App","axios","delete","then","res","filter","post","data","get","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0ac260b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n    //styling with function\n    // getStyle = () =>{\n    //     if(this.props.todo.completed){\n    //         return{\n    //             textDecoration:'line-through'\n    //         }\n    //     }else{\n    //         return{\n    //             textDecoration:'none'\n    //         }\n    //     }\n    // } or\n\n    getStyle = () => {\n        return{\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px dotted #ccc',\n            textDecoration: this.props.todo.completed?'line-through' : 'none'\n        }\n    }\n\n    render() {\n        const { id, title } = this.props.todo\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" \n                    onChange={this.props.markComplete.bind(this,id)}\n                    />{' '}\n                    {title}\n                    <button onClick={this.props.delTodo.bind(this,id)}style={btnStyle}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\n\nconst btnStyle ={\n    background: '#ff0000',\n    color:'white',\n    border:'none',\n    borderRadius:'50%',\n    padding: '5px 9px',\n    cursor:'pointer',\n    float:'right'\n}\n\n//PropTypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nexport default TodoItem\n","import React from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\nclass Todos extends React.Component {\n  render(){\n  return this.props.todos.map((todo) =>(\n      <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete}\n      delTodo={this.props.delTodo}/>\n  ))\n  }\n}\n\n\n//PropTypes\nTodos.propTypes={\n    todos: PropTypes.array.isRequired\n}\nexport default Todos;\n","import React from 'react'\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1>\n        </header>\n    )\n}\n\nconst headerStyle ={\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\nexport default Header;\n\n","import React, { Component } from 'react'\n\nexport class AddToDo extends Component {\n    state = {\n        title: ''\n    }\n    onSubmit = (e) =>{\n        e.preventDefault();\n        if (!this.state.title) {\n            alert('Enter a todo');\n            return;\n        }\n        this.props.addTodo(this.state.title);\n        this.setState({title: ''});    \n    }\n\n    onChange = (e) => this.setState({\n        [e.target.name]: e.target.value\n    });\n    \n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{display:'flex'}}>\n                <input type=\"text\" name=\"title\" placeholder=\"Add Todo ...\" \n                style={{flex:'10',padding:'5px'}}\n                value={this.state.title}\n                onChange={this.onChange}\n                />\n                <input type=\"submit\" value=\"submit\" className=\"btn\"\n                style={{flex:'1'}} />\n            </form>\n        )\n    }\n}\n\nexport default AddToDo\n","import React from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddToDo from './components/AddToDo';\nimport uuid from 'uuid';\nimport axios from 'axios';\n\n\nclass App extends React.Component {\n      state = {\n        todos: []\n      }\n\n      componentDidMount(){\n        axios.get('https://jsonplaceholder.typicode.com/todos?_limit=5').then(res => this.setState({todos: res.data}))\n      }\n  // to show the completed task\n  markComplete = (id) => {\n    this.setState({todos:this.state.todos.map(todo =>{\n      if(todo.id===id){\n        todo.completed = !todo.completed\n      }\n      return(todo);\n    }) });\n  }\n\n  //Delete\n  delTodo = (id) =>{\n    // this.setState({todos:[...this.state.todos.filter(todo => todo.id!==id)]});\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res => this.setState({\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\n    }));\n  }\n\n  //addTodo\n  addTodo = (title) => {\n    // const newTodo ={\n    //   id: uuid.v4(),\n    //   title,\n    //   completed:false\n    // }\n    // this.setState({todos:[...this.state.todos, newTodo]});\n    axios.post('https://jsonplaceholder.typicode.com/todos', \n    {title, \n    completed:false\n    })\n      .then(res => this.setState({todos:[...this.state.todos, res.data] }))\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header/>\n        <AddToDo addTodo={this.addTodo}/>\n        < Todos todos = {\n          this.state.todos\n        }\n        markComplete = {\n          this.markComplete\n        }\n        delTodo={\n          this.delTodo\n        }\n        />\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}